Procédure lancement mysql

set PATH=%PATH%;C:\"Program Files"\MySQL\"MySQL Server 5.6"\bin

mysql

mysql -u root -p

CREATE USER 'savingDaisy'@'localhost' IDENTIFIED BY 'test';
GRANT ALL PRIVILEGES ON elevage.* TO 'savingDaisy'@'localhost';

mysql -u savingDaisy -p

OU via VSC

C:\"Program Files"\MySQL\"MySQL Server 5.6"\bin

Après le chemin direct

PS C:\Program Files\MySQL\MySQL Server 5.6\bin> ./mysql -u savingDaisy -p

Création base de données :
--------------------------

CREATE DATABASE elevage CHARACTER SET 'utf8';
DROP DATABASE IF EXISTS elevage;
USE elevage;

Création de tables : 
--------------------

CREATE TABLE [IF NOT EXISTS] Nom_table (
    colonne1 description_colonne1,
    [colonne2 description_colonne2,
    colonne3 description_colonne3,
    ...,]
    [PRIMARY KEY (colonne_clé_primaire)]
)
[ENGINE=moteur];

CREATE TABLE Animal (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
    espece VARCHAR(40) NOT NULL,
    sexe CHAR(1),
    date_naissance DATETIME NOT NULL,
    nom VARCHAR(30),
    commentaires TEXT,
    PRIMARY KEY (id)
)
ENGINE=INNODB;

SHOW tables;
DESCRIBE animal;
DROPE table animal;

ALTER TABLE nom_table ADD ... -- permet d'ajouter quelque chose (une colonne par exemple)
ALTER TABLE nom_table DROP ... -- permet de retirer quelque chose 
ALTER TABLE nom_table CHANGE ...
ALTER TABLE nom_table MODIFY ... -- permettent de modifier une colonne

ALTER TABLE nom_table 
CHANGE ancien_nom nouveau_nom nouvelle_description;
ALTER TABLE nom_table 
MODIFY nom_colonne nouvelle_description;
Des exemples pour illustrer :
ALTER TABLE Test_tuto 
CHANGE prenom nom VARCHAR(30) NOT NULL; -- Changement du type + changement du nom
ALTER TABLE Test_tuto 
CHANGE id id BIGINT NOT NULL; -- Changement du type sans renommer
ALTER TABLE Test_tuto
MODIFY id BIGINT NOT NULL AUTO_INCREMENT; -- Ajout de l'auto-incrémentation
ALTER TABLE Test_tuto 
MODIFY nom VARCHAR(30) NOT NULL DEFAULT 'Blabla'; -- Changement de la description (même type mais ajout d'une valeur par défaut)

Insérez des données : 
---------------------

INSERT INTO Animal (espece, sexe, date_naissance) 
    VALUES ('tortue', 'F', '2009-08-03 05:12:00');
INSERT INTO Animal (nom, commentaires, date_naissance, espece) 
    VALUES ('Choupi', 'Né sans oreille gauche', '2010-10-03 16:44:00', 'chat');
INSERT INTO Animal (espece, date_naissance, commentaires, nom, sexe) 
    VALUES ('tortue', '2009-06-13 08:17:00', 'Carapace bizarre', 'Bobosse', 'F');

Insertion via fichier : 
mysql>  source C:/Users/alexa/Documents/GitHub/p7/documentation/remplissageAnimal.sql;  

Clause where : 
--------------

SELECT * 
FROM Animal 
WHERE espece='chien';

Opérateurs de comparaison : 
---------------------------

= égal
< inférieur
<= inférieur ou égal
> supérieur
>= supérieur ou égal
<> ou != différent
<=> égal (valable pour NULL  aussi

Combinaison de critères : 
-------------------------

AND && ET
OR || OU
XOR   OU exclusif
NOT ! NON

Exemple : 

SELECT * 
FROM Animal 
WHERE date_naissance > '2009-12-31'
    OR
    ( espece='chat'
         AND
        ( sexe='M'
            OR
            ( sexe='F' AND date_naissance < '2007-06-01' )
        )
    );

Tri des données :
-----------------

SELECT * 
FROM Animal 
WHERE espece='chien' 
ORDER BY date_naissance;

ASC ou DESC (ascendant ou descendant)

SELECT * 
FROM Animal 
WHERE espece='chien' 
    AND nom IS NOT NULL 
ORDER BY nom DESC;

Eliminier les doublons : 
------------------------

Ce mot-clé se place juste après SELECT  et permet d'éliminer les doublons.

SELECT DISTINCT espece 
FROM Animal;
Ceci devrait gentiment vous ramener quatre lignes avec les quatre espèces qui se trouvent dans la table. 

Restreindre les résultats : 
---------------------------

En plus de restreindre une recherche en lui donnant des critères grâce à la clause WHERE, il est possible de restreindre le nombre de lignes récupérées.
Cela se fait grâce à la clause LIMIT.

Syntaxe
LIMIT  s'utilise avec deux paramètres

le nombre de lignes que l'on veut récupérer ;

le décalage, introduit par le mot-clé OFFSET, qui indique à partir de quelle ligne on récupère les résultats. Ce paramètre est facultatif. S'il n'est pas précisé, il est mis à 0.

Exemple :

SELECT * 
FROM Animal 
ORDER BY id 
LIMIT 6 OFFSET 0;

SELECT * 
FROM Animal 
ORDER BY id 
LIMIT 6 OFFSET 3;

Rechercher '%' ou '_' :
-----------------------
Comment faire si vous cherchez une chaîne de caractères contenant % ou _ ? Évidemment, si vous écrivez LIKE '%'  ou LIKE '_', MySQL vous donnera absolument toutes les chaînes de caractères dans le premier cas, et toutes les chaînes de 1 caractère dans le deuxième.
Il faut donc signaler à MySQL que vous ne désirez pas utiliser % ou _ en tant que joker, mais bien en tant que caractère de recherche. Pour ça, il suffit de mettre le caractère d'échappement \, dont je vous ai déjà parlé, devant le % ou le _.

Exclure une chaîne de caractères :
----------------------------------

C'est logique, mais je précise quand même (et puis, cela fait un petit rappel) : l'opérateur logique NOT  est utilisable avec LIKE. Si l'on veut rechercher les animaux dont le nom ne contient pas la lettre a, on peut donc écrire :

SELECT * 
FROM Animal 
WHERE nom NOT LIKE '%a%';

Sensibilité à la casse :
------------------------

Vous l'aurez peut-être remarqué en faisant des essais, LIKE 'chaîne de caractères'  n'est pas sensible à la casse (donc aux différences majuscules-minuscules). Pour rappel, ceci est dû à l'interclassement. Nous avons gardé l'interclassement par défaut du jeu de caractères UTF-8, qui n'est pas sensible à la casse.
Si vous désirez faire une recherche sensible à la casse, vous pouvez définir votre chaîne de recherche comme une chaîne de type binaire, et non plus comme une simple chaîne de caractères :

SELECT * 
FROM Animal 
WHERE nom LIKE '%Lu%'; -- insensible à la casse

SELECT * 
FROM Animal 
WHERE nom LIKE BINARY '%Lu%'; -- sensible à la casse

Recherche dans les numériques

SELECT * 
FROM Animal 
WHERE id LIKE '1%';

Recherche dans un intervalle :
------------------------------

SELECT * 
FROM Animal 
WHERE date_naissance <= '2009-03-23' 
    AND date_naissance >= '2008-01-05';

MAIS le mieux reste d'utiliser : 

SELECT * 
FROM Animal 
WHERE date_naissance BETWEEN '2008-01-05' AND '2009-03-23';

Set de critères : 
-----------------

L'opérateur IN vous permet de faire des recherches dans une liste de valeurs. Parfait pour nous, donc, qui voulons rechercher les animaux correspondant à une liste de noms. Voici la manière d'utiliser IN  :

SELECT * 
FROM Animal 
WHERE nom IN ('Moka', 'Bilba', 'Tortilla', 'Balou', 'Dana', 'Redbul', 'Gingko');

Suppr et modif de données : 
---------------------------
A REVOIR 

Sauvegarde de la base de données : mysqldump

Pour SAVE => mysqldump -u user -p --opt nom_de_la_base > sauvegarde.sql

./mysqldump -u savingDaisy -p --opt elevage > save_elevage.sql

mysqldump -u savingDaisy -p --opt elevage > C:\Users\alexa\Documents\GitHub\p7\documentation\save_elevage.sql

Suppression : 
-------------

Par exemple : Zoulou est mort, paix à son âme :ange: ... Nous allons donc le retirer de la base de données.

DELETE FROM Animal 
WHERE nom = 'Zoulou';

Modification : 
--------------

Par exemple, vous étiez persuadé que ce petit Pataud était un mâle, mais, quelques semaines plus tard, vous vous rendez compte de votre erreur. Il vous faut donc modifier son sexe, mais aussi son nom. Voici la requête qui va vous le permettre :

UPDATE Animal 
SET sexe='F', nom='Pataude' 
WHERE id=21;