La commande SQL pour créer une base de données est la suivante :

CREATE DATABASE nom_base;

Cependant, attendez avant de créer votre base de données elevage. Je vous rappelle qu'il faut également définir l'encodage utilisé (l'UTF-8, dans notre cas). Voici donc la commande complète à taper pour créer votre base :

CREATE DATABASE elevage CHARACTER SET 'utf8';

Suppression
Si vous avez envie d'essayer cette commande, faites-le maintenant, tant qu'il n'y a rien dans votre base de données. Soyez très prudent, car vous effacez tous les fichiers créés par MySQL qui servent à stocker les informations de votre base.

DROP DATABASE elevage;

Pour éviter ce message d'erreur, si vous n'êtes pas sûr que la base de données existe, vous pouvez utiliser l'option IF EXISTS, de la manière suivante :

DROP DATABASE IF EXISTS elevage;
Si la base de données existe, vous devriez alors avoir un message du type :

Query OK, 0 rows affected (0.00 sec)
Si elle n'existe pas, vous aurez :

Query OK, 0 rows affected, 1 warning (0.00 sec)

Pour afficher les warnings de MySQL, il faut utiliser la commande :

SHOW WARNINGS;

Utilisation d'une base de données
Vous avez maintenant créé une base de données (si vous l'avez effacée avec DROP DATABASE, recréez-la). Mais pour pouvoir agir sur cette base, vous devez d'abord la sélectionner. Une fois de plus, la commande est très simple :

USE elevage

Notez que vous pouvez spécifier la base de données sur laquelle vous allez travailler lors de la connexion à MySQL. Il suffit d'ajouter le nom de la base à la fin de la commande de connexion :

mysql -u sdz -p elevage

----------------------------------------------------------------------

Création de table
-----------------

Récapitulatif
Comme d'habitude, un petit tableau pour récapituler tout cela :

Caractéristique

Nom de la colonne

Type

NULL?

Espèce

espece

VARCHAR(40)

Non

Sexe

sexe

CHAR(1)

Oui

Date de naissance

date_naissance

DATETIME

Non

Commentaires

commentaires

TEXT

Oui

Nom

nom

VARCHAR(30)

Oui

Identité
Imaginez que quelqu'un ait le même nom de famille que vous, le même prénom, soit né dans la même ville et ait la même taille. En dehors de la photo et de la signature, quelle sera la différence entre vos deux cartes d'identité ? Son numéro !
Suivant le même principe, on va donner à chaque animal un numéro d'identité. La colonne que l'on ajoutera s’appellera donc id, et il s'agira d'un INT, toujours positif donc UNSIGNED. 

Préciser un moteur lors de la création de la table
Pour qu'une table utilise le moteur de notre choix, il suffit d'ajouter ceci à la fin de la commande de création :

ENGINE = moteur;
En remplaçant bien sûr "moteur" par le nom du moteur que nous voulons utiliser, ici InnoDB :

ENGINE = INNODB;

Création de la table
CREATE TABLE [IF NOT EXISTS] Nom_table (
    colonne1 description_colonne1,
    [colonne2 description_colonne2,
    colonne3 description_colonne3,
    ...,]
    [PRIMARY KEY (colonne_clé_primaire)]
)
[ENGINE=moteur];

Définition des colonnes
Pour définir une colonne, il faut donc donner son nom en premier, puis sa description. La description est constituée au minimum du type de la colonne. Exemple :

nom VARCHAR(30),
sexe CHAR(1)
C'est aussi dans la description que l'on précise si la colonne peut contenir NULL  ou pas (par défaut, NULL  est autorisé). Exemple :

espece VARCHAR(40) NOT NULL,
date_naissance DATETIME NOT NULL
L'auto-incrémentation se définit également à cet endroit. Notez qu'il est également possible de définir une colonne comme étant la clé primaire dans sa description. Il ne faut alors plus l'indiquer après la définition de toutes les colonnes. Je vous conseille néanmoins de ne pas l'indiquer à cet endroit, nous verrons plus tard pourquoi.

id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT [PRIMARY KEY]
Enfin, on peut donner une valeur par défaut au champ. Si lorsque l'on insère une ligne, aucune valeur n'est précisée pour le champ, c'est la valeur par défaut qui sera utilisée. Notez que, si une colonne est autorisée à contenir NULL  et que l'on ne précise pas de valeur par défaut, alors NULL  est implicitement considéré comme valeur par défaut.

Exemple :

espece VARCHAR(40) NOT NULL DEFAULT 'chien'

Application : création de Animal
Si l'on met tout cela ensemble pour créer la table Animal (je rappelle que nous utiliserons le moteur InnoDB), on a donc :

CREATE TABLE Animal (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
    espece VARCHAR(40) NOT NULL,
    sexe CHAR(1),
    date_naissance DATETIME NOT NULL,
    nom VARCHAR(30),
    commentaires TEXT,
    PRIMARY KEY (id)
)
ENGINE=INNODB;
Je n'ai pas gardé la valeur par défaut pour le champ espece, car je trouve que cela n'a pas beaucoup de sens dans ce contexte. C'était juste un exemple pour vous montrer la syntaxe.

Vérifications
Au cas où vous ne me croiriez pas (et aussi un peu parce que cela pourrait vous être utile un jour), voici deux commandes vous permettant de vérifier que vous avez bien créé une jolie table Animal avec les six colonnes que vous vouliez.

SHOW TABLES;      -- liste les tables de la base de données

DESCRIBE Animal;  -- liste les colonnes de la table avec leurs caractéristiques
Suppression d'une table
La commande pour supprimer une table est la même que celle pour supprimer une base de données. Elle est, bien sûr, à utiliser avec prudence, car irréversible.

DROP TABLE Animal;

En résumé
Avant de créer une table, il faut définir ses colonnes. Pour cela, il faut donc déterminer le type de chacune des colonnes et décider si elles peuvent ou non contenir NULL  (c'est-à-dire ne contenir aucune donnée).

Chaque table créée doit définir une clé primaire, donc une colonne qui permettra d'identifier chaque ligne de manière unique.

Le moteur d'une table définit la manière dont elle est gérée. Nous utiliserons le moteur InnoDB, qui permet notamment de définir des relations entre plusieurs tables.

orsque l'on modifie une table, on peut vouloir lui ajouter, retirer ou modifier quelque chose. Dans les trois cas, c'est la commande ALTER TABLE  qui sera utilisée, une variante existant pour chacune des opérations :

ALTER TABLE nom_table ADD ... -- permet d'ajouter quelque chose (une colonne par exemple)

ALTER TABLE nom_table DROP ... -- permet de retirer quelque chose 

ALTER TABLE nom_table CHANGE ...
ALTER TABLE nom_table MODIFY ... -- permettent de modifier une colonne

Ajout et suppression d'une colonne
Ajout
On utilise la syntaxe suivante :

ALTER TABLE nom_table 
ADD [COLUMN] nom_colonne description_colonne;
Le [COLUMN]  est facultatif, donc, si à la suite de ADD  , vous ne précisez pas ce que vous voulez ajouter, MySQL considérera qu'il s'agit d'une colonne.
description_colonne  correspond à la même chose que lorsque l'on crée une table. Il contient le type de donnée et éventuellement NULL  ou NOT NULL, etc.

Ajoutons une colonne date_insertion à notre table de test. Il s'agit d'une date, donc une colonne de type DATE  convient parfaitement. Disons que cette colonne ne peut pas être NULL  (si c'est dans la table, cela a forcément été inséré). Cela nous donne :

ALTER TABLE Test_tuto 
ADD COLUMN date_insertion DATE NOT NULL;
Un petit DESCRIBE Test_tuto;  vous permettra de vérifier les changements apportés.

Suppression
La syntaxe de ALTER TABLE ... DROP ...  est très simple :

ALTER TABLE nom_table 
DROP [COLUMN] nom_colonne;
Comme pour les ajouts, le mot COLUMN  est facultatif. Par défaut, MySQL considérera que vous parlez d'une colonne.

Exemple : nous allons supprimer la colonne date_insertion, que nous remercions pour son passage éclair dans le cours.

ALTER TABLE Test_tuto 
DROP COLUMN date_insertion; -- Suppression de la colonne date_insertion
Modification de colonne
Changement du nom de la colonne
Vous pouvez utiliser la commande suivante pour changer le nom d'une colonne :

ALTER TABLE nom_table 
CHANGE ancien_nom nouveau_nom description_colonne;
Par exemple, pour renommer la colonne nom en prenom, vous pouvez écrire :

ALTER TABLE Test_tuto 
CHANGE nom prenom VARCHAR(10) NOT NULL;
Attention, la description de la colonne doit être complète, sinon elle sera également modifiée. Si vous ne précisez pas NOT NULL  dans la commande précédente, prenom pourra contenir NULL, alors que, du temps où elle s'appelait nom, cela lui était interdit.

Changement du type de données
Les mots-clés CHANGE  et MODIFY  peuvent être utilisés pour changer le type de donnée de la colonne, mais aussi changer la valeur par défaut ou ajouter/supprimer une propriété AUTO_INCREMENT. Si vous utilisez CHANGE, vous pouvez, comme on vient de le voir, renommer la colonne en même temps. Si vous ne désirez pas la renommer, il suffit d'indiquer deux fois le même nom.
Voici les syntaxes possibles :

ALTER TABLE nom_table 
CHANGE ancien_nom nouveau_nom nouvelle_description;

ALTER TABLE nom_table 
MODIFY nom_colonne nouvelle_description;
Des exemples pour illustrer :

ALTER TABLE Test_tuto 
CHANGE prenom nom VARCHAR(30) NOT NULL; -- Changement du type + changement du nom

ALTER TABLE Test_tuto 
CHANGE id id BIGINT NOT NULL; -- Changement du type sans renommer

ALTER TABLE Test_tuto
MODIFY id BIGINT NOT NULL AUTO_INCREMENT; -- Ajout de l'auto-incrémentation

ALTER TABLE Test_tuto 
MODIFY nom VARCHAR(30) NOT NULL DEFAULT 'Blabla'; -- Changement de la description (même type mais ajout d'une valeur par défaut)

----------------------------------------------------------------------

Insérez des données
-------------------

Insertion sans préciser les colonnes
Je rappelle pour les distraits que notre table Animal est composée de six colonnes : id, espece, sexe, date_naissance, nom et commentaires.

Voici donc la syntaxe à utiliser pour insérer une ligne dans Animal, sans renseigner les colonnes pour lesquelles on donne une valeur (implicitement, MySQL considère que l'on donne une valeur pour chaque colonne de la table).

INSERT INTO Animal 
VALUES (1, 'chien', 'M', '2010-04-05 13:43:00', 'Rox', 'Mordille beaucoup');

INSERT INTO Animal (espece, sexe, date_naissance) 
    VALUES ('tortue', 'F', '2009-08-03 05:12:00');
INSERT INTO Animal (nom, commentaires, date_naissance, espece) 
    VALUES ('Choupi', 'Né sans oreille gauche', '2010-10-03 16:44:00', 'chat');
INSERT INTO Animal (espece, date_naissance, commentaires, nom, sexe) 
    VALUES ('tortue', '2009-06-13 08:17:00', 'Carapace bizarre', 'Bobosse', 'F');

Exécuter des commandes SQL à partir d'un fichier
Écrire toutes les commandes à la main dans la console peut vite devenir pénible. Quand c'est une petite requête, pas de problème. Mais quand vous avez une longue requête, ou beaucoup de requêtes à faire, cela peut être assez long.

Une solution sympathique est d'écrire les requêtes dans un fichier texte, puis de dire à MySQL d'exécuter les requêtes contenues dans ce fichier. Et pour lui dire cela, c'est facile :

SOURCE monFichier.sql;
Ou

\. monFichier.sql;

Ce type de fichier est facile à produire (et à lire) avec un logiciel de type tableur (Microsoft Excel, ExcelViewer, Numbers…). La bonne nouvelle est qu'il est aussi possible de lire ce type de fichier avec MySQL, afin de remplir une table avec les données contenues dans le fichier.
La commande SQL permettant cela est LOAD DATA INFILE, dont voici la syntaxe :

LOAD DATA [LOCAL] INFILE 'nom_fichier'
INTO TABLE nom_table
[FIELDS
    [TERMINATED BY '\t']
    [ENCLOSED BY '']
    [ESCAPED BY '\\' ]
]
[LINES 
    [STARTING BY '']    
    [TERMINATED BY '\n']
]
[IGNORE nombre LINES]
[(nom_colonne,...)];

Ajout d'un fichier .sql

C:/Users/alexa/Documents/GitHub/p7/documentation/remplissageAnimal.sql

LOAD DATA LOCAL INFILE 'C:/Users/alexa/Documents/GitHub/p7/documentation/animal.csv'
INTO TABLE Animal
FIELDS TERMINATED BY ';' ENCLOSED BY '"'
LINES TERMINATED BY '\n' -- ou '\r\n' selon l'ordinateur et le programme utilisés pour créer le fichier
(espece, sexe, date_naissance, nom, commentaires);
